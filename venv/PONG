import pygame
import sys
import time
import random 
from pygame.locals import *
from pygame.math import Vector2

pygame.init()
main_clock = pygame.time.Clock()


WINDOWWIDTH = 500
WINDOWHEIGHT = 400
WINDOW_HEIGHT = 500
win_surface = pygame.display.set_mode((WINDOWWIDTH, WINDOW_HEIGHT), 0, 32)
pygame.display.set_caption('PONG')

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

SPEED = 5

# player's paddles
player_right = pygame.Rect(450, 150, 40, 90)
player_image = pygame.image.load('paddles_bg.jpg')
player_stretched_image = pygame.transform.scale(player_image, (40,90))
player_top = pygame.Rect(350, 10, 90, 40)
player_image2 = pygame.image.load('paddles_bg.jpg')
player_stretched_image2 = pygame.transform.scale(player_image2, (90,40))
player_bottom = pygame.Rect(350, 350, 90, 40)
player_image3 = pygame.image.load('paddles_bg.jpg')
player_stretched_image2 = pygame.transform.scale(player_image3, (90,40))

# computer's paddles
com_left = pygame.Rect(0, 150, 40, 90)
com_image = pygame.image.load('thorns_bg.jpg')
com_stretched_image = pygame.transform.scale(com_image, (40,90))
com_top = pygame.Rect(50, 10, 90, 40)
com_image2 = pygame.image.load('thorns_bg.jpg')
com_stretched_image2 = pygame.transform.scale(com_image2, (90,40))
com_bottom = pygame.Rect(50, 350, 90, 40)
com_image3 = pygame.image.load('thorns_bg.jpg')
com_stretched_image3 = pygame.transform.scale(com_image3, (90,40))

# sphere
list = [2, -2]
sphere_ = {'rect': pygame.draw.circle(win_surface, WHITE, (289, random.randint(50, 340)), 15), 'color': Color('#FFFFFF'), 'vel': Vector2(random.choice(list), random.choice(list)) * (SPEED - 1)}
sphere_image = pygame.image.load('trans_sphere.png')
sphere_stretched = pygame.transform.scale(sphere_image, (25,25))


player_score = 0
com_score = 0

move_left = False
move_right = False
move_up = False
move_down = False


score_sound = pygame.mixer.Sound('scored.wav')
scored_on_sound = pygame.mixer.Sound('Scored_on.wav')
pygame.mixer.music.load('background.wav')
pygame.mixer.music.play(-1, 0.0)
music_playing = True

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        if event.type == KEYDOWN:
            if event.key == K_LEFT or event.key == K_a:
                move_right = False
                move_left = True
            if event.key == K_RIGHT or event.key == K_d:
                move_left = False
                move_right = True
            if event.key == K_UP or event.key == K_w:
                move_down = False
                move_up = True
            if event.key == K_DOWN or event.key == K_s:
                move_up = False
                move_down = True
        if event.type == KEYUP:
            if event.key == K_ESCAPE:
                pygame.quit()
                sys.exit()
            if event.key == K_LEFT or event.key == K_a:
                move_left = False
            if event.key == K_RIGHT or event.key == K_d:
                move_right = False
            if event.key == K_UP or event.key == K_w:
                move_up = False
            if event.key == K_DOWN or event.key == K_s:
                move_down = False
            if event.key == K_x:
                player.top = random.randint(0, WINDOWHEIGHT - player.height)
                player.left = random.randint(0, WINDOWWIDTH - player.width)
            if event.key == K_m:
                if music_playing:
                    pygame.mixer.music.stop()
                else:
                    pygame.mixer.music.play(-1, 0.0)
                music_playing = not music_playing
        
    win_surface.fill(BLACK)

    basicFont = pygame.font.SysFont(None, 25)
    text = basicFont.render('Computer Score: %d' % com_score, True, WHITE, BLACK)
    textRect = text.get_rect()
    textRect.x = 40
    textRect.y = 550
    text2 = basicFont.render('Player Score: %d' % player_score, True, WHITE, BLACK)
    textRect2 = text2.get_rect()
    textRect2.x = 330
    textRect2.y = 550

    coors = [20, 50, 80, 110, 140, 170, 200, 230, 260, 290, 320, 350, 380, 400]
    for i in coors:
        pygame.draw.line(win_surface, WHITE, (250, i), (250, i+10), 5)
        i + 2
    if move_down and player_right.bottom < WINDOWHEIGHT:
        player_right.top += SPEED
    if move_up and player_right.top > 0:
        player_right.top -= SPEED
    if move_left and player_top.left and player_bottom.left > WINDOWWIDTH/2:
        player_top.left -= SPEED
        player_bottom.left -= SPEED
    if move_right and player_top.right and player_bottom.right < WINDOWWIDTH:
        player_top.right += SPEED
        player_bottom.right += SPEED
    if com_left.top > 0:
        com_left.centery = sphere_['rect'].y
        com_left.top -= SPEED
    if com_left.bottom < WINDOWHEIGHT:
        com_left.centery = sphere_['rect'].y
        com_left.top += SPEED
    com_top.x = sphere_['rect'].x
    com_bottom.x = sphere_['rect'].x
    if com_top.left and com_bottom.left > 0:
        com_top.left += SPEED
        com_bottom.left += SPEED
    if com_top.right and com_bottom.right < WINDOWWIDTH/2:
        com_top.right -= SPEED
        com_bottom.right -= SPEED
    # if com_top.right and com_bottom.right < WINDOWWIDTH/2:
    #     com_top.centerx= sphere_.x
    #     com_bottom.centerx = sphere_.x
    r = sphere_['rect']
    v = sphere_['vel']
    clr = sphere_['color']

    r.left += v[0]
    r.top += v[1]
    if player_right.colliderect(sphere_['rect']) or com_left.colliderect(sphere_['rect']):
        v[0] *= -1
    if player_top.colliderect(sphere_['rect']) or player_bottom.colliderect(sphere_['rect']):
        v[1] *= -1
    if com_top.colliderect(sphere_['rect']) or com_bottom.colliderect(sphere_['rect']):
        v[1] *= -1
    # adding scores and resetting the ball
    if r.top <= 0 and r.right >= WINDOWWIDTH:
        scored_on_sound.play()
        com_score += 1
        r.x = 289
        r.y = random.randint(50, 240)
    if r.bottom >= WINDOWHEIGHT and r.right >= WINDOWWIDTH:
        scored_on_sound.play()
        com_score += 1
        r.x = 289
        r.y = random.randint(50, 240)
    if r.right >= WINDOWWIDTH:
        scored_on_sound.play()
        com_score += 1
        r.x = 289
        r.y = random.randint(50, 240)
    if r.top <= 0 and r.left <= 0:
        score_sound.play()
        player_score += 1
        r.x = 289
        r.y = random.randint(50, 240)
    if r.bottom >= WINDOWHEIGHT and r.left <= 0:
        score_sound.play()
        player_score += 1
        r.x = 289
        r.y = random.randint(50, 240)
    if r.left <= 0:
        score_sound.play()
        player_score += 1
        r.x = 289
        r.y = random.randint(50, 240)

    pygame.draw.rect(win_surface, clr, r)

    win_surface.blit(player_stretched_image, player_right)
    win_surface.blit(player_stretched_image2, player_top)
    win_surface.blit(player_stretched_image2, player_bottom)
    # win_surface.blit(sphere_stretched, sphere_)
    win_surface.blit(com_stretched_image, com_left)
    win_surface.blit(com_stretched_image2, com_top)
    win_surface.blit(com_stretched_image3, com_bottom)
    if com_score == 10:
        text = basicFont.render('You lost', True, BLACK, RED)
        textRect = text.get_rect()
        textRect.centerx = win_surface.get_rect().centerx
        textRect.centery = win_surface.get_rect().centery
        text = basicFont.render('Do you want to play again? (yes or no', True, WHITE, BLACK)
        textRect = text.get_rect()
        textRect.centerx = win_surface.get_rect().centerx
        textRect.centery = win_surface.get_rect().centery
        if not input().lower().startswith('y'):
            break
    if player_score == 10:
        text = basicFont.render('You won', True, WHITE, BLUE)
        textRect = text.get_rect()
        textRect.centerx = win_surface.get_rect().centerx
        textRect.centery = win_surface.get_rect().centery
        text = basicFont.render('Do you want to play again? (yes or no', True, WHITE, BLACK)
        textRect = text.get_rect()
        textRect.centerx = win_surface.get_rect().centerx
        textRect.centery = win_surface.get_rect().centery
        if not input().lower().startswith('y'):
            break


    pygame.display.update()
    main_clock.tick(40)

            

